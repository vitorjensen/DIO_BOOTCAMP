########## Versionamento com GIT e GITHUB ##########

ğŸ‘‰ O que Ã© Versionamento de cÃ³digo:
--> Conceitualmente, Ã© a divisÃ£o das tarefas onde cada um pode trabalhar de sua casa, de forma compartilhada.
--> No final pode ser mesclado os dois trabalhos.
--> Pode haver conflitos entre os controles e organizaÃ§Ã£o de versÃ£o caso seja necessÃ¡rio buscar algum trecho especÃ­fico

ğŸ‘‰ Sistema de Controle de VersÃ£o:
Controlam as versÃµes de um arquivo ao longo do tempo
--> Registra o histÃ³rico de atualizaÃ§Ãµes de um arquivo
--> Gerencia quais foram as alteraÃ§Ãµes, a data, autor, etc...
--> OrganizaÃ§Ã£o, controle e seguranÃ§a.

	- Dentre os Sistemas de Controle de VersÃ£o (VCS), temos:
ğŸ‘‰ VCS Centralizado (CVCS)
Ex: CVS, Subversion.

user ------------------ Servidor Central ---------------------- user 2
 |				|				  |
 |			Banco de VersÃµes 			  |
Arquivo <-----------------| VersÃ£o 3 |-------------------------> Arquivo
			  | VersÃ£o 2 |
			  | VersÃ£o 1 |

=> O Servidor Central armazena as versÃµes, os dois usuÃ¡rios conectados ao servidor.
=> Se o Servidor Central ficar fora do ar, os usuÃ¡rios perdem as alteraÃ§Ãµes nÃ£o sendo possÃ­vel salvar as modificaÃ§Ãµes no servidor.
=> Precisa ser feito o BKP

ğŸ‘‰ VCS DistribuÃ­do (DVCS)
Ex: Git, Mercurial

user ------------------ Servidor Central ---------------------- user 2
 |				|				  |
 |			Banco de VersÃµes 			  |
Arquivo <-----------------| VersÃ£o 3 |-------------------------> Arquivo
VersÃ£o 3		  | VersÃ£o 2 |				 VersÃ£o 3
VersÃ£o 2		  | VersÃ£o 1 |				 VersÃ£o 2
VersÃ£o 1 <-----------------------------------------------------> VersÃ£o 1

=> Os usuÃ¡rios nÃ£o dependem da disponibilidade do servidor para realizar e salvar as alteraÃ§Ãµes
=> Cada clone Ã© um BKP
=> Possibilita um fluxo de trabalho flexÃ­vel
=> Possibilita o trabalho sem conexÃ£o da rede

########## O que Ã© GIT? ##########
--> Ã‰ um Sistema de Controle de VersÃ£o DistribuÃ­do
--> Gratuito e Open Source
--> RamificaÃ§Ãµes (Branching) e fusÃµes (merging) eficientes
--> Leve e rÃ¡pido
(Link para docs: hhtp://git-scm.com/)
--> Surgiu com o projeto Kernel do Linux em 2002, quando comeÃ§a usar o BitKeeper, um DVCS propietÃ¡rio.
--> Em 2005, Linux Torvalds cria sua prÃ³pria ferramenta, o GIT.

ğŸ‘‰ Fluxo bÃ¡sico no GIT (Comandos):
--> "git clone" = Clona o repositÃ³rio existente e cria um novo em uma pasta local.
--> "git commit" = ApÃ³s criado uma nova versÃ£o do projeto, utilizar o git commit para salvar as alteraÃ§Ãµes no repositÃ³rio.
--> "git pull" = Conferir se o outro desenvolvedor finalizou suas alteraÃ§Ãµes, apÃ³s, executar o comando "git pull" para PUXAR as alteraÃ§Ãµes do repositÃ³rio REMOTO para seu repositÃ³rio LOCAL.
--> "git push" = Envia as novas informaÃ§Ãµes do seu repositÃ³rio local para o repositÃ³rio remoto, atualizando-o. 


########## O que Ã© GITHUB? #########
--> Plataforma de Hospedagem de cÃ³digo para controle de versÃ£o com GIT, e colaboraÃ§Ã£o.
--> Utilizado mundialmente.
--> Mascote "Octocat".

########## Comandos GIT para criaÃ§Ã£o de um nome de usuÃ¡rio e email para os projetos ##########
--> git config user.name "nome_do_usuario" = Cria um nome para o usuÃ¡rio
--> git config user.email "email_do_usuario" = Cria um email para o usuÃ¡rio
--> git config init.DefaultBranch = Mostra a Branch que estÃ¡ configurada
--> git config --global init.DefaultBranch "nome_da_branch" = Cria uma branch globalmente

########## Autenticando via Token #########
1Âº Passo: 
	- Criar um repositÃ³rio no GITHUB
2Âº Passo:
	- Selecionar a opÃ§Ã£o HTTPS e copiar o link sugerido ("https://github...")
3Âº Passo:
	- Usar o comando "git clone" para clonar o repositÃ³rio criado em seu diretÃ³rio selecionado na mÃ¡quina.
(OBS: Ã‰ possÃ­vel que ao criar um clone, seja necessÃ¡rio incluir os dados de autenticaÃ§Ã£o como usuÃ¡rio e senha)

4Âº Passo:
	- Autenticar clonagem via TOKEN. Seguir o caminho: Ã­cone do seu profile --> settings --> developer settings --> Tokens Classics --> Generate new token classic
5Âº Passo: 
	- Configurar as informaÃ§Ãµes do token --> Clicar no botÃ£o de gerar o Token e copia-lo 
6Âº Passo: 
	- Ao usar git clone, colar a chave TOKEN no campo de PASSWORD.

########## Salvar token automaticamente na mÃ¡quina ##########
--> "git config --global credential.helper store = Comando para habilitar autenticaÃ§Ã£o com token automÃ¡tica

########## Clonando repositÃ³rio utilizando a conexÃ£o SSH ##########
--> Ã‰ gerado um par de chaves 
1Âº Passo:
	--> "ls -al ~/.ssh" = Verifica se hÃ¡ alguma chave SSH 
2Âº Passo:
        --> "ssh-keygen -t ed25519 -C "your_email@example.com"" = Comando para gerar a chave e armazena-la no diretÃ³rio especÃ­fico.
3Âº Passo:
	--> Pressionar ENTER
4Âº Passo: 
	--> Passar uma passphrase para seguranÃ§a:
	"minhachavessh"

5Âº Passo: Ativar o SSH Agent 
	--> 
 eval "$(ssh-agent -s)"  

6Âº Passo: 	
	--> Adicionar essa mesma chave para o SSH Agent utilizando o comando abaixo:
ssh-add ~/.ssh/id_ed25519

7Âº Passo:
	--> Inserir a passphrase criada: "minhachavessh"



 

