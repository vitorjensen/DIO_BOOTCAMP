######### Entendendo a estrutura de um projeto #######


--> .csproj = ExtensÃ£o para o arquivo de Projeto do C#
	-> Possui os metadados
	-> Utiliza o XML (Uso de tags)
ğŸ‘‰ Tags do arquivo
--> <OutputType> = SaÃ­da ao compilar ao projeto, que pode ser um executÃ¡vel ou um projeto

--> Pasta OBJ = Armazena arquivos de Debug


######### Conceito de Classe #########

--> EstÃ¡ relacionada ao conceito de AbstraÃ§Ã£o na programaÃ§Ã£o Orientada a Objetos

ğŸ‘‰ PILARES DA ABSTRAÃ‡ÃƒO:
--> AbstraÃ§Ã£o:
	- Pegar um objeto do mundo real e transforma-lo o objeto na programaÃ§Ã£o 
--> CaracterÃ­sticas da classe:

1Âº ATRIBUTOS:
	- Nome da classe
	- Nome do TIPO da classe (String, int, float...)
______________________________	
|	    Pessoa	     |
|____________________________|
| + Nome: String	     |
| + idade: int	             | ----> AbstraÃ§Ã£o do cÃ³digo
|____________________________|
| + apresentaÃ§Ã£o()	     |
|____________________________|

2Âº AÃ‡Ã•ES:
	- MÃ©todo = AÃ§Ã£o que a classe irÃ¡ fazer
 
--> As classes representam a construÃ§Ã£o do OBJETO. Ã‰ um conceito representado do mundo real.

+++++ ConvenÃ§Ã£o do C# +++++

--> A cada nova palavra escrita para nomenclatura, colocar com letra MAIÃšSCULA

--> Pasta MODELS: Armazena os arquivos de classes (.cs) 


######### GET e SET #########

--> GET: Pega o valor da variÃ¡vel.
--> SET: Atribui o valor (Representado pelo sinal de "=").
--> FunÃ§Ã£o ou MÃ©todo = nome_do_metodo(aqui_vai_o_argumento_do_metodo);
--> Namespace = Representa um caminho lÃ³gico para se organizar classes que podem estar dentro de um mesmo domÃ­nio (Caminho virtual) 
--> Palavra reservadas = Palavras exclusivas e que nÃ£o podem ser usadas como nomes para variÃ¡veis por exemplo. Pode haver conflitos com o C#.

--> dotnet run = comando para executar o projeto

######### Explorando sintaxes ##########
--> O uso do "." = Atribui aÃ§Ãµes, propriedades, mÃ©todos e informaÃ§Ãµes para a variÃ¡vel.

--> Uso da quebra de linha = " + $ "

######### ConvenÃ§Ãµes ##########

ğŸ‘‰ SINTAXE = Conjunto de regras que Ã© necessÃ¡rio escrever no C#, se nÃ£o o cÃ³digo nÃ£o Ã© compilado

ğŸ‘‰ Case:

- PadrÃ£o de escrita para nomes
- Se nÃ£o seguir as convenÃ§Ãµes, o cÃ³digo serÃ¡ compilado normalmente

--> camelCase = Declarar varÃ¡veis, a primeira letra comeÃ§a minÃºscula

--> PascalCase = Para nome de Classes, propriedades, mÃ©todos...

--> snake_case

--> spinal-case 

ğŸ‘‰ Escrita:
- AbreviaÃ§Ãµes nÃ£o sÃ£o recomendadas
- Nome do arquivo fÃ­sico ser o mesmo nome da classe.

ğŸ‘‰ Nome e variÃ¡vel: 
- Utilizar o underline caso precise escrever algo diferente











